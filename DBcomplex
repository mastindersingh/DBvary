def process_sql_server_kpi(kpi, mssql, current_date, next_date, kpi_tracking_data):
    """
    Process KPI data from SQL Server for a given date range.
    """
    # Ensure current_date is a datetime object
    if not isinstance(current_date, datetime):
        raise ValueError("current_date must be a datetime object")

    # Calculate the previous month's start date
    first_day_current_month = current_date.replace(day=1)
    prev_month_start = first_day_current_month - timedelta(days=1)
    prev_month_start = prev_month_start.replace(day=1, hour=0, minute=0, second=0, microsecond=0, tzinfo=timezone.utc)

    print(f"Calculated prev_month_start: {prev_month_start}")  # Debugging output

    # Ensure prev_month_start is a string before replacing
    if not isinstance(prev_month_start, datetime):
        raise TypeError(f"prev_month_start is not a datetime object: {type(prev_month_start)}")

    # Debug raw query
    print(f"Raw Query: {kpi['query_text']}")

    # Replace placeholders in query
    query = kpi["query_text"]
    query = query.replace("{start_date}", current_date.strftime("%Y/%m/%d %H:%M"))
    print(f"After start_date replacement: {query}")

    query = query.replace("{end_date}", next_date.strftime("%Y/%m/%d %H:%M"))
    print(f"After end_date replacement: {query}")

    query = query.replace("{prev_month_start}", prev_month_start.strftime("%Y/%m/%d %H:%M"))
    print(f"After prev_month_start replacement: {query}")

    # Print the query for debugging
    logger.info(f"Executing query: {query}")
    print(f"Executing query: {query}")  # Debugging output

    # Execute the query
    results = mssql.execute_query(query)

    return results
